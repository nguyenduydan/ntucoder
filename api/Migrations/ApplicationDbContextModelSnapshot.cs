// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Models;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("api.Models.ERD.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PwdResetCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PwdResetDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReceiveEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("SaltMD5")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("api.Models.ERD.Badge", b =>
                {
                    b.Property<int>("BadgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BadgeID"));

                    b.Property<string>("Color")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasDefaultValue("#FFD700");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BadgeID");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("api.Models.ERD.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BlogID"));

                    b.Property<DateTime>("BlogDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PinHome")
                        .HasColumnType("int");

                    b.Property<int>("Published")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("BlogID");

                    b.HasIndex("CoderID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("api.Models.ERD.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CatOrder")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("api.Models.ERD.Coder", b =>
                {
                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CoderEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CoderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("CoderID");

                    b.ToTable("Coders");
                });

            modelBuilder.Entity("api.Models.ERD.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<int?>("BlogID")
                        .HasColumnType("int");

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("BlogID");

                    b.HasIndex("CoderID");

                    b.HasIndex("CourseID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("api.Models.ERD.Compiler", b =>
                {
                    b.Property<int>("CompilerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompilerID"));

                    b.Property<string>("CompilerExtension")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompilerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CompilerOption")
                        .HasColumnType("int");

                    b.Property<string>("CompilerPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("CompilerID");

                    b.ToTable("Compilers");
                });

            modelBuilder.Entity("api.Models.ERD.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<int?>("BadgeID")
                        .HasColumnType("int");

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int>("CourseCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsCombo")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("OriginalFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<int>("Status")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("TotalReviews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("CourseID");

                    b.HasIndex("BadgeID");

                    b.HasIndex("CoderID");

                    b.HasIndex("CourseCategoryID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("api.Models.ERD.CourseCategory", b =>
                {
                    b.Property<int>("CourseCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CourseCategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("CourseCategoryID");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("api.Models.ERD.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EnrollmentID"));

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("datetime");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CoderID");

                    b.HasIndex("CourseID");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("api.Models.ERD.Lesson", b =>
                {
                    b.Property<int>("LessonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LessonID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("LessonContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LessonTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LessonID");

                    b.HasIndex("TopicID");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("api.Models.ERD.LessonSubmission", b =>
                {
                    b.Property<int>("LessonSubmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LessonSubmissionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Feedback")
                        .HasColumnType("longtext");

                    b.Property<int>("LessonID")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("SubmissionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LessonSubmissionID");

                    b.HasIndex("LessonID");

                    b.HasIndex("SubmissionID");

                    b.ToTable("LessonSubmissions");
                });

            modelBuilder.Entity("api.Models.ERD.Problem", b =>
                {
                    b.Property<int>("ProblemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProblemID"));

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int?>("MemoryLimit")
                        .HasColumnType("int");

                    b.Property<string>("ProblemCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProblemContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemExplanation")
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TestCompilerID")
                        .HasColumnType("int");

                    b.Property<string>("TestProgCompile")
                        .HasColumnType("longtext");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float?>("TimeLimit")
                        .HasColumnType("float");

                    b.HasKey("ProblemID");

                    b.HasIndex("CoderID");

                    b.HasIndex("TestCompilerID");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("api.Models.ERD.ProblemCategory", b =>
                {
                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ProblemID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProblemCategories");
                });

            modelBuilder.Entity("api.Models.ERD.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("CoderID");

                    b.HasIndex("CourseID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("api.Models.ERD.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            Name = "User"
                        },
                        new
                        {
                            RoleID = 3,
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("api.Models.ERD.Solved", b =>
                {
                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.HasKey("CoderID", "ProblemID");

                    b.HasIndex("ProblemID");

                    b.ToTable("Solved");
                });

            modelBuilder.Entity("api.Models.ERD.Submission", b =>
                {
                    b.Property<int>("SubmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SubmissionID"));

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int>("CompilerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("MaxMemorySize")
                        .HasColumnType("longtext");

                    b.Property<string>("MaxTimeDuration")
                        .HasColumnType("longtext");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubmissionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TakePartID")
                        .HasColumnType("int");

                    b.Property<string>("TestResult")
                        .HasColumnType("longtext");

                    b.Property<int?>("TestRunCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("SubmissionID");

                    b.HasIndex("CoderID");

                    b.HasIndex("CompilerID");

                    b.HasIndex("ProblemID");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("api.Models.ERD.TestCase", b =>
                {
                    b.Property<int>("TestCaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TestCaseID"));

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PreTest")
                        .HasColumnType("longtext");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<string>("SampleTest")
                        .HasColumnType("longtext");

                    b.Property<int>("TestCaseOrder")
                        .HasColumnType("int");

                    b.HasKey("TestCaseID");

                    b.HasIndex("ProblemID");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("api.Models.ERD.TestRun", b =>
                {
                    b.Property<int>("TestRunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TestRunID"));

                    b.Property<string>("CheckerLog")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MemorySize")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubmissionID")
                        .HasColumnType("int");

                    b.Property<int>("TestCaseID")
                        .HasColumnType("int");

                    b.Property<string>("TestOutput")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TimeDuration")
                        .HasColumnType("int");

                    b.HasKey("TestRunID");

                    b.HasIndex("SubmissionID");

                    b.HasIndex("TestCaseID");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("api.Models.ERD.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TopicID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("TopicDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("TopicID");

                    b.HasIndex("CourseID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("api.Models.ERD.Account", b =>
                {
                    b.HasOne("api.Models.ERD.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Models.ERD.Blog", b =>
                {
                    b.HasOne("api.Models.ERD.Coder", "Coder")
                        .WithMany("Blogs")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("api.Models.ERD.Coder", b =>
                {
                    b.HasOne("api.Models.ERD.Account", "Account")
                        .WithOne("Coder")
                        .HasForeignKey("api.Models.ERD.Coder", "CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("api.Models.ERD.Comment", b =>
                {
                    b.HasOne("api.Models.ERD.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Models.ERD.Coder", "Coder")
                        .WithMany("Comments")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.Course", "Course")
                        .WithMany("Comments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Blog");

                    b.Navigation("Coder");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("api.Models.ERD.Course", b =>
                {
                    b.HasOne("api.Models.ERD.Badge", "Badge")
                        .WithMany("Courses")
                        .HasForeignKey("BadgeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("api.Models.ERD.Coder", "Creator")
                        .WithMany("Courses")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.CourseCategory", "CourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("CourseCategory");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("api.Models.ERD.Enrollment", b =>
                {
                    b.HasOne("api.Models.ERD.Coder", "Coder")
                        .WithMany("Enrollments")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("api.Models.ERD.Lesson", b =>
                {
                    b.HasOne("api.Models.ERD.Topic", "Topic")
                        .WithMany("Lessons")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("api.Models.ERD.LessonSubmission", b =>
                {
                    b.HasOne("api.Models.ERD.Lesson", "Lesson")
                        .WithMany("LessonSubmissions")
                        .HasForeignKey("LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.Submission", "Submission")
                        .WithMany("LessonSubmissions")
                        .HasForeignKey("SubmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("api.Models.ERD.Problem", b =>
                {
                    b.HasOne("api.Models.ERD.Coder", "Coder")
                        .WithMany("Problems")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.Compiler", "Compiler")
                        .WithMany("Problems")
                        .HasForeignKey("TestCompilerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Compiler");
                });

            modelBuilder.Entity("api.Models.ERD.ProblemCategory", b =>
                {
                    b.HasOne("api.Models.ERD.Category", "Category")
                        .WithMany("ProblemCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.Problem", "Problem")
                        .WithMany("ProblemCategories")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("api.Models.ERD.Review", b =>
                {
                    b.HasOne("api.Models.ERD.Coder", "Coder")
                        .WithMany("Reviews")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("api.Models.ERD.Solved", b =>
                {
                    b.HasOne("api.Models.ERD.Coder", "Coder")
                        .WithMany("Solveds")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.Problem", "Problem")
                        .WithMany("Solveds")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("api.Models.ERD.Submission", b =>
                {
                    b.HasOne("api.Models.ERD.Coder", "Coder")
                        .WithMany("Submissions")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.Compiler", "Compiler")
                        .WithMany("Submissions")
                        .HasForeignKey("CompilerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.Problem", "Problem")
                        .WithMany("Submissions")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Compiler");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("api.Models.ERD.TestCase", b =>
                {
                    b.HasOne("api.Models.ERD.Problem", "Problem")
                        .WithMany("TestCases")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("api.Models.ERD.TestRun", b =>
                {
                    b.HasOne("api.Models.ERD.Submission", "Submission")
                        .WithMany("TestRuns")
                        .HasForeignKey("SubmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ERD.TestCase", "TestCase")
                        .WithMany("TestRuns")
                        .HasForeignKey("TestCaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("api.Models.ERD.Topic", b =>
                {
                    b.HasOne("api.Models.ERD.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("api.Models.ERD.Account", b =>
                {
                    b.Navigation("Coder")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.ERD.Badge", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("api.Models.ERD.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("api.Models.ERD.Category", b =>
                {
                    b.Navigation("ProblemCategories");
                });

            modelBuilder.Entity("api.Models.ERD.Coder", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Courses");

                    b.Navigation("Enrollments");

                    b.Navigation("Problems");

                    b.Navigation("Reviews");

                    b.Navigation("Solveds");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("api.Models.ERD.Compiler", b =>
                {
                    b.Navigation("Problems");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("api.Models.ERD.Course", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Enrollments");

                    b.Navigation("Reviews");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("api.Models.ERD.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("api.Models.ERD.Lesson", b =>
                {
                    b.Navigation("LessonSubmissions");
                });

            modelBuilder.Entity("api.Models.ERD.Problem", b =>
                {
                    b.Navigation("ProblemCategories");

                    b.Navigation("Solveds");

                    b.Navigation("Submissions");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("api.Models.ERD.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("api.Models.ERD.Submission", b =>
                {
                    b.Navigation("LessonSubmissions");

                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("api.Models.ERD.TestCase", b =>
                {
                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("api.Models.ERD.Topic", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
